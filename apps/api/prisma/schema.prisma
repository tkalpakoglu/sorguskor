generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String
  role          String         @default("user")
  createdAt     DateTime       @default(now())
  refreshHash   String?
  subscriptions Subscription[]
  scans         Scan[]
  MonthlyUsage  MonthlyUsage[]
  reviews       Review[]
}

model Plan {
  id            String         @id
  priceUsd      Decimal
  monthlyQuota  Int?
  features      Json           @default("{}")
  isActive      Boolean        @default(true)
  subscriptions Subscription[]
}

model Subscription {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  plan             Plan     @relation(fields: [planId], references: [id])
  planId           String
  provider         String
  providerRef      String
  status           String
  currentPeriodEnd DateTime?
  createdAt        DateTime @default(now())
}

model MonthlyUsage {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  periodStart DateTime
  periodEnd   DateTime
  used        Int      @default(0)

  @@unique([userId, periodStart])
}

model Scan {
  id          String   @id @default(uuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  domain      String
  status      String   // 'queued' | 'running' | 'done' | 'error'
  score       Int?
  verdict     String?
  evidence    Json?
  createdAt   DateTime @default(now())
  completedAt DateTime?
  reviews     Review[]
}

model PaymentEvent {
  id          String   @id @default(uuid())
  provider    String
  eventType   String
  eventId     String   @unique
  raw         Json
  processedAt DateTime?
  createdAt   DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  scan      Scan?    @relation(fields: [scanId], references: [id])
  scanId    String?
  domain    String
  rating    Int
  comment   String
  status    String   @default("pending") // pending | approved | rejected
  createdAt DateTime @default(now())
}
